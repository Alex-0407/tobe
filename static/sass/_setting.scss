/* -------------------------------------------------
 * base mixin  
 * author:为之;
 * email:xuyc_brother@foxmail.com;
 * blog:http://www.w3cpluscom;
 * -------------------------------------------------
*/
//inline-block
@mixin inline-block {
  display: inline-block;*display: inline;*zoom:1;
}

//float left
%fl{
  float: left;
  display: inline;
}

//float right
%fr{
  float: right;
  display: inline;
}

//clearfix
@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//Hide from both screenreaders and browsers: h5bp.com/u
%hidden{
  display: none !important;
    visibility: hidden;
}

//Hide only visually, but have it available for screenreaders: h5bp.com/v
%visuallyhidden{
  border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

// Hide visually and from screenreaders, but maintain layout
 %invisible{
  visibility: hidden;
 }

// A CSS image replacement method that does not require the use of text-indent.
@mixin img-replace{
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;
  &:before {
      content: "";
      display: block;
      width: 0;
      height: 150%;
  }
}


//size:width,height 
//https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_size.scss
@mixin size($size) {
  @if length($size) == 1 {
    @if $size == auto {
      width: $size;
      height: $size;
    }

    @else if unitless($size) {
      width: $size + px;
      height: $size + px;
    }

    @else if not(unitless($size)) {
      width: $size;
      height: $size;
    }
  }

  // Width x Height
  @if length($size) == 2 {
    $width: nth($size, 1);
    $height: nth($size, 2);

    @if $width == auto {
      width: $width;
    }
    @else if not(unitless($width)) {
      width: $width;
    }
    @else if unitless($width) {
      width: $width + px;
    }

    @if $height == auto {
      height: $height;
    }
    @else if not(unitless($height)) {
      height: $height;
    }
    @else if unitless($height) {
      height: $height + px;
    }
  }
}

// Retina images. 
// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// HEX to RGB
// http://codepen.io/sturobson/pen/hdKyv
@mixin rgba($color, $value) {
	background-color: $color;
	background-color: rgba($color, $value);
}

// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
@function em($pxval, $base: 16) {
  @return ($pxval / $base) * 1em;
}


// Add percentage of white to a color
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
  @return mix(black, $color, $percent);
}

// triangle
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;

    } @else if $direction == right {
      border-left-color:   $color;

    } @else if $direction == down {
      border-top-color:    $color;

    } @else if $direction == left {
      border-right-color:  $color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;

    @if $direction == up-right {
      border-left:  $size dashed transparent;

    } @else if $direction == up-left {
      border-right: $size dashed transparent;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;

    @if $direction == down-right {
      border-left:  $size dashed transparent;

    } @else if $direction == down-left {
      border-right: $size dashed transparent;
    }
  }
}

//position
@mixin position ($position: relative, $coordinates: 0 0 0 0) {

  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  position: $position;

  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }

  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }

  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }

  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}