@charset "UTF-8";
/* -------------------------------------------------
 * grid
 * thanks 
 * http://www.blankwork.net/
 * http://semantic.gs/
 * http://heygrady.com/blog/2011/02/17/using-sass-with-the-1kb-grid-system/   
 * https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/functions/_flex-grid.scss
 * -------------------------------------------------
*/
// Main Variables:
// I'm placing an underscore before each variable
// because I'm using rather generic names
// I'm using the underscore
// to avoid any accidents:
$_columns: 12 !default;      // Total number of columns
$_column-width: 60px !default;   // Width of a single column
$_gutter: 20px !default;     // Width of the gutter
$_gridsystem-width: $_columns * ($_column-width + $_gutter); //grid system width

// Set $total-width to 100% for a fluid layout
$total_width: 960px;

// a fluid layout 
// ie6,7  get_width($columns:$_columns, $onlyInnerWidth: true, $_subtract:$correction)
// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;


// clearfixï¼Œfl, if no _mixin.scss,please enable it
// %clearfix{
//   *zoom:1;
//   &:before, &:after
//   {
//     content: "";
//     display:table;
//   }
//   &:after
//   {
//     clear:both;
//   }
// }
// %float-left{
//   float: left;
//   @if $lte7 {
//     display: inline;
//   }
// }

// A Function to calculate width:
// Example usage: (based on default values)
// get_width(3, false) would return 240px
// get_width(3) or get_width(3, true) would return 220px;
// and plain get_width() or get_width would return 940px;
@function get_width($columns:$_columns, $onlyInnerWidth: true, $_subtract:0)
{
  // First set a default return value 
  $return: (($_column-width + $_gutter) * $columns / $_gridsystem-width) * $total_width - $_subtract;

  // If we want to get only the inner width (without gutter)
  @if $onlyInnerWidth == true
  {
    // Return the total calculated width, without the margins
    // If the second parameter of this function is not specified
    // This is what is going to be returned
    $return: ((($_column-width + $_gutter) * $columns - $_gutter) / $_gridsystem-width) * $total_width - $_subtract;
  }

  @return $return;
}

// Column Mixin:
// We're defining the default values as follows:
// Default Column Count: Max Column Count
// Padding (explained below): 0
// Margin is the gutter width, but can be overridden 
@mixin column($columns: $_columns, $_subtract:0, $_offset: false, $gutter:$_gutter)
{
  // Default Properties for a column:
  @extend %float-left;
  $getWidth: get_width($columns, true, $_subtract); // Use the width calculation function to get the width 

    @if unit($total_width) == "%" {
      $gutter: ($_gutter / $_gridsystem-width) * $total_width;
    }

    @if $gutter != 0 
    {
        // Check for Alpha (a, first, f);
        @if $_offset == alpha {
          margin-left: -($gutter / 2);margin-right:$gutter/2;
        } 
        @else if $_offset == a {
          margin-right: ($gutter / 2);margin-left:0;
        }
        @else if $_offset == first {
          margin-right: ($gutter / 2);margin-left:0;
        }
        @else if $_offset == f {
          margin-right: ($gutter / 2);margin-left:0;
        }

        // Check for Omega (o, l, last);
        @else if $_offset == omega {
          margin-right: -($gutter / 2);margin-left:$gutter/2;
        }
        @else if $_offset == o {
          margin-left: ($gutter / 2);margin-right:0;
        }
        @else if $_offset == last {
          margin-left: ($gutter / 2);margin-right:0;
        }
        @else if $_offset == l {
          margin-left: ($gutter / 2);margin-right:0;
        }
        // No Margins
        @else if $_offset == full {
          $getWidth: $getWidth + $gutter;
        } 
        @else if $_offset == none {
          $getWidth: $getWidth + $gutter;
        }

        @else {
          margin-left: ($gutter / 2); 
          margin-right: ($gutter / 2);
        }
    }
    width: $getWidth;
}

// Finally, we need a wrapper for our columns. 
// This typically is a main content wrapper, 
// But just in case someone finds an alternative use of this, 
// we shouldhave the flexibility
// So wrapper( column count, center ?, subtract)
@mixin wrapper($columns: $_columns, $center:true, $_subtract:0)
{
  // Because this is a wrapper, we don't need the outer gutter - we need the full width
  $getWrapperWidth: get_width($columns, false);
  // In case there is a need to subtract the wrapper
  $wrapperWidth: $getWrapperWidth - $_subtract;
  width:$wrapperWidth;

  // If we want the wrapper to be centered (by default we do)
  @if $center == true
  {
    margin-left:auto;
    margin-right:auto;
  }

  // And clear the mess afterwards:
  @extend %clearfix;
}

// To be able to use columns inside another element,
// You need to set that element to be a container (of how many columns)
// So: @include container(x_number_of_columns)
@mixin container($i:$_columns, $_subtract:0)
{
  @extend %float-left;
  $getWidth: get_width($i, false); // Use the width calculation function to get 
  $columnWidth: $getWidth - $_subtract;
  width: $columnWidth;
}

// Flexible grid
@function flex-span($i, $container-columns: $_columns,$onlyInnerWidth: true) {
  $percentage: percentage($i / $container-columns);
  @if $onlyInnerWidth == true
  {
    $width: $i * $_column-width + ($i - 1) * $_gutter;
    $container-width: $container-columns * $_column-width + ($container-columns - 1) * $_gutter;
    $percentage: percentage($width / $container-width);
  }
  @return $percentage;
}

//alpha & omega
@mixin alpha {
  margin-left:0;
}
@mixin omega {
  margin-right:0;
}

//http://bjorkoy.com/2010/05/css-grids-with-sass/
/* prepend n blank columns */ 
@mixin prepend($i: 1) { margin-left: get_width($i,false,$_subtract:0);} 
/* append n blank columns */ 
@mixin append($i: 1) { margin-right: get_width($i,false,$_subtract:0);}